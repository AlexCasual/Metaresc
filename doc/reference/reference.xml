<?xml version="1.0" encoding="utf-8"?>
<article xmlns="http://docbook.org/ns/docbook"
      xmlns:xlink="http://www.w3.org/1999/xlink" version="5.0">
  
  <info>
    <title>
      METARESC library reference
    </title>

    <author>
      <personname>
        <firstname>Alexander</firstname>
        <surname>Churanov</surname>
      </personname>
    </author>

    <copyright>
      <year>2011</year>
      <holder>Alexander Churanov</holder>
    </copyright>
  </info>
  
  <section xml:id="overview">
    <title>Overview</title>
    
    <para>
      METARESC is a software library written in C programming
      language. It allows declaring types using a special METARESC
      grammar. The variables of types declared that way may be
      subsequently serialized into various formats and deserialized
      later. To achieve this the library adds metadata annotations to
      types. These annotations may be used for may purposes far beyond
      just achieving the persistence. Run-time type introspection,
      easier parsing, mapping to relational databases are some
      examples, which immediately come to mind.
    </para>
  </section>

  <section xml:id="distinctive">
    <title>Distinctive Features</title>
    
    <para>
      There are other solutions for data marshalling around. To make
      an intelligent choice you need to know how they all differ. The
      following is a list of features that are specific to METARESC.
    </para>
    
    <para>
      <itemizedlist>
        <listitem><para>
        Works with arbitrary types, structures of any complexity.
        </para></listitem>
        
        <listitem><para>
        Each type is described only once at the time of its declaration.  
        </para></listitem>
        
        <listitem><para>
        Supports multiple input/output formats.
        </para></listitem>
        
        <listitem><para>
        Exposes metadata, supports run-time introspection of types.
        </para></listitem>
        
        <listitem><para>
        Provides global registry of types and metadata-by-typename lookup.
        </para></listitem>
        
        <listitem><para>
        Fast compilation for code which uses the library.
        </para></listitem>
        
        <listitem><para>
        Reasonable CPU and memory consumption.
        </para></listitem>
      </itemizedlist>
    </para>
  </section>
  
  <section xml:id="general">
    <title>Getting Started</title>
    
    <section>
      <title>What you need to use the library</title>
      <para>
        <itemizedlist>
          <listitem><para>
            Library headers and binary (static or dynamic) installed
          </para></listitem>
          
          <listitem><para>
            GNU C Compiler 4.2 or newer
          </para></listitem>
        </itemizedlist>
      </para>
      
      <para>
        Yes, at present the list of supported compilers isn't
        long. This is because to provide all its features the library
        has to use very sophisticated language and run-time
        mechanisms. Porting the library to other compilers is a work
        in progress.
      </para>
      
      <para>
        Note, that now not only the library itself, but also its
        clients have to be written in C and compiled with the GCC.
      </para>
    </section>
    
    <section>
      <title>Installation</title>
      
      <section>
        <title>Installing pre-built version</title>
        <para />
      </section>
      
      <section>
        <title>Installing from source</title>
        <para />
      </section>
    </section>
    
  </section>
  
  <section xml:id="type-declaration">
    <title>Declaring Types</title>
    
    <section>
      <title>Why special grammar?</title>
      <para>
        The C programming language does not provide metadata for
        types: neither for built-ins, nor for used-defined
        sturtures. For example, in plain C it is impossible to walk
        through the members of the structure, get their names and
        types programmatically. This ability, called type
        introspection, is crucial for data persistence. To perform
        deserialization the application needs to know where to place
        incoming data.
      </para>
      
      <para>
        To overcome this, the library provides specific grammar for
        declaring types. User-defined types, declared that way, contain
        the necessary metadata, added by the library.
      </para>
    </section>
    
    <section>
      <title>Declaring structures</title>
      <para />
    </section>
    
    <section>
      <title>Using built-in types</title>
      <para />
    </section>
    
  </section>
  
  <section xml:id="data-persistence">
    <title>Data Persistence</title>
    
    <section>
      <title>Serialization</title>
      <para />
    </section>
    
    <section>
      <title>Deserialization</title>
      <para />
    </section>
    
    <section>
      <title>Supported Data Formats</title>
      <para />
    </section>
    
  </section>
  
  <section xml:id="metadata-tech">
    <title>Metadata and their applications</title>
    
    <section>
      <title>Understaning type and field descriptors</title>
      <para />
    </section>
    
  </section>
  
</article>
